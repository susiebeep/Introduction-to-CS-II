/**********************************************************************************
 ** Program Name: Source code for the member functions of the child class Vampire
 ** Author:       Susan Hibbert
 ** Date:         2 May 2019
 ** Description:  This program contains the member function definitions for the
		  child class Vampire
 ** Citations:	  Chapter 15 Polymorphism and Virtual Functions, Starting Out With
		  C++ Early Objects, 9th Edition, Gaddis
 ** *******************************************************************************/ 
#include "vampire.hpp"
#include "character.hpp"
#include <string>
#include <iostream>
#include <cstdlib>

/********************************************************************************** 
 ** Description: The default construtor for the Vampire class sets its int data
		 members, armor and strength_points, it inherited from the Character
		 class, to default values upon instantiation of a newly constructed 
		 Vampire object
 ** *******************************************************************************/ 

Vampire::Vampire()
{
	this -> set_strength_points(18);
	this -> set_armor(1);
}


/********************************************************************************** 
 ** Description: The get_type function of the Vampire class is an overridden 
		 function of the Character class. It takes no parameters and returns
		 a string indicating the type of the Character object i.e. Vampire
 ** *******************************************************************************/ 

std::string Vampire::get_type()
{
	return "Vampire";
	
}


/********************************************************************************** 
 ** Description: The attack function of the Vampire class is an overridden function
		 of the Character class using 1d12. It takes no parameters and
		 returns the attack roll from a 1d12 as an int 
 ** *******************************************************************************/ 

int Vampire::attack()
{
	//Attack is 1d12
	int attack_roll;

	//roll the dice	
	attack_roll = rand() % 12 + 1;
	
	std::cout << "Attacker's Attack Dice Roll: " << attack_roll << std::endl;	
	
	return attack_roll;
}


/********************************************************************************** 
 ** Description: The defense function of the Vampire class is an overridden function
		 of the Character class using 1d6 and charm. It takes an int parameter
		 representing the attack roll of the attacking Character object and
		 calculates the damage inflicted to its strength points and returns
		 the damage as an int. After the damage has been calculated, the
		 strength points of the defending Vampire object are updated.
		 Vampires can implement a special ability called charm in which they
		 can charm an opponent into not attacking. For a given attack, there
		 is a 50% chance of charm occurring and their opponent being unable
		 to attack. In this case, the defense roll generated by the Vampire
		 object is multiplied by 1000 to generate a high defense roll in order
		 to resist damage from attack. If the Vampire's charm ability activates
		 when Medusa uses glare, charm will trump glare.
 ** *******************************************************************************/ 

int Vampire::defense(int attack)
{
	//display strength points and armor before attack
	int defense_strength = this -> get_strength_points();
	int armor = this -> get_armor();	
	std::cout << "Defender Strength Points: " << defense_strength << std::endl;	
	std::cout << "Defender Armor: " << armor << std::endl;	

	//Defense is 1d6
	int defense_roll;
	int charm;	
	
	//50% chance of charm occuring
	charm = rand() % 2 + 1;
	
	//roll the dice
	defense_roll = rand() % 6 + 1;
	
	//if charm occurs the Vampire's defense roll is set to a high number to
	//negate the attack roll of the opponent	
	if (charm == 1)
	{	
		defense_roll = defense_roll * 1000;
		std::cout << " " << std::endl;
		std::cout << "^.^ Vampire used charm and opponent cannot attack! ^.^" 
			  << std::endl;
		std::cout << " " << std::endl;
	}
	else
	{
		defense_roll = defense_roll;
	}

	std::cout << "Defender's Defend Dice Roll: " << defense_roll << std::endl;
	
	//calculate damage inflicted
	int damage = attack - defense_roll - armor;
	
	//if damage inflicted is a negative value set the damage to 0
	if (damage < 0)
	{
		damage = 0;	
	}

	std::cout << "Total Inflicated Damage Calculation: " << damage << std::endl;
	
	//set new strength points for defender following attack
	this -> set_strength_points((defense_strength - damage));

	//if the damage inflicted results in negative strength points set the strength 
	//points to 0
	if ((this -> get_strength_points()) < 0)
	{
		this -> set_strength_points(0);
	}

	std::cout << "Defender's Updated Strength Points After Damage: " << this -> get_strength_points()
		  << std::endl;
	
	return damage;

}


